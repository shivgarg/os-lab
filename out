mkdir -p ./_tmp/iso/boot
cp ./_tmp/hoh.exe _tmp/iso/boot/hoh.exe
grub-mkrescue -o _tmp/hoh.iso ./_tmp/iso
qemu-system-i386 -cpu Haswell -smp 2 -m 1024  -D qemu.log -d in_asm,int -serial stdio -serial null -cdrom ./_tmp/hoh.iso
mem_lower = 0000027f, mem_upper = 000ffbf8
cmdline   = /hoh
mod_start=0011b000, mod_end=0011e05c, mod_cmdline=/app1
 size = 00000014, base_addr = 0000000000000000, length = 000000000009fc00, type = 00000001
 size = 00000014, base_addr = 000000000009fc00, length = 0000000000000400, type = 00000002
 size = 00000014, base_addr = 00000000000f0000, length = 0000000000010000, type = 00000002
 size = 00000014, base_addr = 0000000000100000, length = 000000003fefe000, type = 00000001
Adding from= 00400000 to= 3fc00000
 size = 00000014, base_addr = 000000003fffe000, length = 0000000000002000, type = 00000002
 size = 00000014, base_addr = 00000000fffc0000, length = 0000000000040000, type = 00000002
Pool Size: 00fe Pool=00100050
core 00000000 initializing mem: 00fd Pool=00100050
size of core=00010000
is_bsp:00000001
apic_base:fee00000
00000000: core_reset begin
nirq=00000018
log_id: 00
lapic_prio:  sub_class =	00	(Priority subclass)
 priority =	00	(Priority)

enabling paging
enabled paging
remotecore_reset: from: 00000000 remotecoreid: 00000001
00000000Pool remaining: 00fb
remotecore_reset done: from: 00000000 remotecoreid: 00000001
00000000: Hello, serial!
====== RING3 ELF LOAD =========== : 
COUNT: 00000001
MOD: 0011b000 0011e05c
EI Magic byte 0: 7f
EI Magic byte 1: 45
EI Magic byte 2: 4c
EI Magic byte 3: 46
EI Class:        01
EI Data:         01
EI Version:      01
EI OS/ABI:       00
EI ABI Version:  00
EI Padding:      00
ELF Type:        0003
ELF Machine:     0003
ELF Version:     00000001
ELF Entry:       00000220
ELF Phdr start:  00000034
ELF Shdr start:  000028ec
ELF Flags:       00000000
ELF Ehdr size:   0034
ELF Phdr size:   0020
ELF Phdr num:    0009
ELF Shdr size:   0028
ELF Shdr num:    0010
ELF ShdrStr Idx: 000d
PHdr:          00000000
Phdr Type:     00000006
Phdr Offset:   00000034
Phdr VirtAddr: 00000034
Phdr PhysAddr: 00000034
Phdr FileSize: 00000120
Phdr MemSize:  00000120
Phdr Flags:    00000005
Phdr Align:    00000004
PHdr:          00000001
Phdr Type:     00000003
Phdr Offset:   00000154
Phdr VirtAddr: 00000154
Phdr PhysAddr: 00000154
Phdr FileSize: 00000013
Phdr MemSize:  00000013
Phdr Flags:    00000004
Phdr Align:    00000001
PHdr:          00000002
Phdr Type:     00000001
Phdr Offset:   00000000
Phdr VirtAddr: 00000000
Phdr PhysAddr: 00000000
Phdr FileSize: 00002794
Phdr MemSize:  00002794
Phdr Flags:    00000005
Phdr Align:    00000040
PHdr:          00000003
Phdr Type:     00000001
Phdr Offset:   0000279c
Phdr VirtAddr: 00002f5c
Phdr PhysAddr: 00002f5c
Phdr FileSize: 00000060
Phdr MemSize:  00000060
Phdr Flags:    00000006
Phdr Align:    00000040
PHdr:          00000004
Phdr Type:     00000001
Phdr Offset:   00002800
Phdr VirtAddr: 00003000
Phdr PhysAddr: 00003000
Phdr FileSize: 0000000c
Phdr MemSize:  0000000c
Phdr Flags:    00000006
Phdr Align:    00000040
PHdr:          00000005
Phdr Type:     00000002
Phdr Offset:   0000279c
Phdr VirtAddr: 00002f5c
Phdr PhysAddr: 00002f5c
Phdr FileSize: 00000060
Phdr MemSize:  00000060
Phdr Flags:    00000006
Phdr Align:    00000004
PHdr:          00000006
Phdr Type:     00000004
Phdr Offset:   00000168
Phdr VirtAddr: 00000168
Phdr PhysAddr: 00000168
Phdr FileSize: 00000024
Phdr MemSize:  00000024
Phdr Flags:    00000004
Phdr Align:    00000004
PHdr:          00000007
Phdr Type:     6474e550
Phdr Offset:   00002448
Phdr VirtAddr: 00002448
Phdr PhysAddr: 00002448
Phdr FileSize: 00000084
Phdr MemSize:  00000084
Phdr Flags:    00000004
Phdr Align:    00000004
PHdr:          00000008
Phdr Type:     6474e551
Phdr Offset:   00000000
Phdr VirtAddr: 00000000
Phdr PhysAddr: 00000000
Phdr FileSize: 00000000
Phdr MemSize:  00000000
Phdr Flags:    00000007
Phdr Align:    00000010
PROC ESP043ffff0
00000000: core_loop begin
apps_loop: esp=00800f20
Shell core_mem_init
Ring3 core: 00000000 04000000
Hello, from ring3 shell!
 Core: 04000000
00000000: ring3 core_reset begin: 04000000
00000000: core_loop begin
Shell Before making system call
: inside isr downcall: 00000000  esp=00800fa0
00000000: core_loop begin
apps_loop: esp=00800f20
Systemcall: 00000009: 00000000,00000000,00000000
MAPPED SUCCESSFULLY00000200 04400087
remote core booting
core 00000001 initializing mem: 000a Pool=00007010
size of core=00010000
is_bsp:00000000
apic_base:fee00000
00000001: core_reset begin
log_id: 00
lapic_prio:  sub_class =	00	(Priority subclass)
 priority =	00	(Priority)

enabling paging
enabled paging
00000001: Hello, serial!
00000001: core_loop begin
apps_loop: esp=01000f20
Systemcall: 00000009: 00000000,00000000,00000000 RESULT: 00000001,80000000,00000000
Shell After making system call
RETURN VALUE 00000001 80000000 00000000
Shell Before making system call
: inside isr downcall: 00000000  esp=00800fa0
00000000: core_loop begin
apps_loop: esp=00800f20
Systemcall: 00000009: 00000000,00000000,00000000
MAPPED SUCCESSFULLY00000201 04800087
Systemcall: 00000009: 00000000,00000000,00000000 RESULT: 00000001,80400000,00000000
Shell After making system call
RETURN VALUE 00000001 80400000 00000000
Shell Before making system call
: inside isr downcall: 00000000  esp=00800fa0
00000000: core_loop begin
apps_loop: esp=00800f20
Systemcall: 00000006: 80000000,80400000,00000000
Systemcall: 00000006: 80000000,80400000,00000000 RESULT: 00000001,00000000,00000000
Shell After making system call
RETURN VALUE 00000001 00000000 00000000
*pg 2100000015
*pg1 120000000c: inside isr lapic_internal: 00000006  esp=00800fa0
00000000: core_loop begin
apps_loop: esp=00800f20

: inside isr lapic_internal: 00000006  esp=00800fa0
00000000: core_loop begin
apps_loop: esp=00800f20
Shell Be: inside isr lapic_internal: 00000006  esp=00800fa0
00000000: core_loop begin
apps_loop: esp=00800f20
Systemcall: 00000001: 00000000,00000000,00000000
freed masterrw
freed to
index 00000200
index 00000201
Systemcall: 00000001: 00000000,00000000,00000000 RESULT: 00000001,00000000,00000000
